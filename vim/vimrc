" Vim Configuration
" Shoutout to Doug Black for his notes here: https://dougblack.io/words/a-good-vimrc.html


" --------------------------------------------------
" General
" --------------------------------------------------
set showmatch   " Highlight matching [{()}]
set number      " show line numbers
set mouse=a     " Allow cursor placement with the mouse
set cursorline  " Add a line under the cursor
set showcmd     " Show command in bottom bar
set lazyredraw  " Only redraw the screen when needed
set wildmenu    " Visual autocomplete for command menu
set whichwrap+=<,>,[,]    " Make left and right arrow keys wrap around
set backspace=indent,eol,start    " Back space behaves as expected
packadd termdebug    " gdb integration with ':Termdebug'


" --------------------------------------------------
" Plugins
" --------------------------------------------------
call plug#begin('~/.vim/plugged')    " Begin Plug plugins


" ----------
" You Complete Me - auto complete
" ----------
Plug 'ycm-core/YouCompleteMe'
" Note: this one requires extra setup. See https://github.com/ycm-core/YouCompleteMe

" ----------
" Monokai
" ----------
" Monokai theme - https://github.com/patstockwell/vim-monokai-tasty
Plug 'patstockwell/vim-monokai-tasty'

" ----------
" Airline Bar
" ----------
" Display info bar at the bottom - https://github.com/vim-airline/vim-airline
Plug 'vim-airline/vim-airline'
let g:airline_theme='monokai_tasty'

" ----------
" Syntax Linter
" ----------
" Syntax checking with ALE - https://github.com/w0rp/ale
Plug 'w0rp/ale'

" ----------
" IndentLine
" ----------
" Add vertical lines to show indentation - https://github.com/Yggdroot/indentLine
Plug 'Yggdroot/indentLine'

let g:indentLine_enabled=1 " Enable by default
let g:indentLine_char='¦'
let g:indentLine_conceallevel=1
let g:indentLine_showFirstIndentLevel=1

" ----------
" Search
" ----------
" ack Search - https://github.com/mileszs/ack.vim
Plug 'mileszs/ack.vim'

" Silver Searcher - relies on ack.vim - https://github.com/ggreer/the_silver_searcher
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

" ----------
" NerdTree
" ----------
" Directory tree with NERDTree - https://github.com/scrooloose/nerdtree
Plug 'scrooloose/nerdtree'

" Start NERDTree when nvim opens file
autocmd vimenter * NERDTree

" Start NERDTree when nvim opens directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Close vim if nerdtree is the only open window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let g:NERDTreeDirArrowExpandable = '▸' " TODO: change to directory icon
let g:NERDTreeDirArrowCollapsible = '▾'

"let NERDTreeDirArrowExpandable = "\u00a0" " make arrows invisible
"let NERDTreeDirArrowCollapsible = "\u00a0" " make arrows invisible

" Allow customization of NerdTree colors - https://github.com/tiagofumo/vim-nerdtree-syntax-highlight
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

" ----------
" Dev Icons - Load this last!
" ----------
" Allow use of icons in Vim plugins - https://github.com/ryanoasis/vim-devicons
Plug 'ryanoasis/vim-devicons'

" Set encoding for use with Nerd Icons
set encoding=UTF-8

call plug#end()    " Initialize plugin system



" --------------------------------------------------
" Cursor - Change thickness by mode
" --------------------------------------------------
" Extra work needs to be done for this to work in tmux
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif


" --------------------------------------------------
" Search
" --------------------------------------------------
set hlsearch    " Highlight search terms
set incsearch   " search as characters are entered


" --------------------------------------------------
" Indentation
" --------------------------------------------------
set tabstop=4        " Tab visual spacing
set softtabstop=4    " Tab editing spacing
set expandtab        " Insert spaces instead of tabs
set autoindent       "
set shiftwidth=4     " 
set smarttab         "
filetype indent on   " Load filetype-specific indent files # TODO create/find a makefile specific file


" --------------------------------------------------
" Colors
" --------------------------------------------------
syntax on       " Syntax highlighting
"colorscheme peachpuff " TODO: find a perfect monokai scheme

" Set monokai color scheme
let g:vim_monokai_tasty_italic = 1
colorscheme vim-monokai-tasty
let g:airline_theme='monokai_tasty'

" ---------- Monokai Color Shortcuts ----------
let s:monokaiBrown = "905532"
let s:monokaiYellow = "ffff87"
let s:monokaiPurple = "af87ff"
let s:monokaiGreen  = "A4E400"
let s:monokaiLightBlue = "62D8F1"
let s:monokaiMagenta = "FC1A70"
let s:monokaiOrange = "FF9700"

" ---------- Other Colors ----------
let s:brown = "905532"
let s:aqua =  "3AFFDB"
let s:blue = "689FB6"
let s:darkBlue = "44788E"
let s:purple = "834F79"
let s:lightPurple = "834F79"
let s:red = "AE403F"
let s:beige = "F5C06F"
let s:yellow = "F09F17"
let s:orange = "D4843E"
let s:darkOrange = "F16529"
let s:pink = "CB6F6F"
let s:salmon = "EE6E73"
let s:green = "8FAA54"
let s:lightGreen = "31B53E"
let s:white = "FFFFFF"
let s:rspec_red = 'FE405F'
let s:git_orange = 'F54D27'

" ---------- Customize NerdTree Colors ----------
let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExtensionHighlightColor['dir'] = s:monokaiLightBlue " sets the color of directories to blue

" TODO: Get directory icons. Change directory color to blue


" --------------------------------------------------
" Folding
" --------------------------------------------------
set foldenable           " Enable folding
set foldmethod=indent    " Fold based on indent level
set foldlevelstart=5     " Fold anything at level 5+
set foldnestmax=10       " 10 nested fold max


" --------------------------------------------------
" Keybinds
" --------------------------------------------------
nnoremap <space> za    " space open/closes folds
" TODO: map ':nohlsearch<CR>' to something to toggle search highlights off

" Move vertically through wrapped lines
nnoremap j gj
nnoremap k gk


" --------------------------------------------------
" Autogroups
" --------------------------------------------------
augroup configgroup
    autocmd VimEnter * highlight clear SignColumn
    "autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md
    "            \:call <SID>StripTrailingWhitespaces()

    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd FileType python setlocal commentstring=#\ %s
augroup END


" --------------------------------------------------
" Backups
" --------------------------------------------------
set backup    " Create a backup of 'file' to 'file~''

set backupdir=~/tmp/vim-backup/backup//,.    " Backup~ file location
set directory=~/tmp/vim-backup/swp//,.       " Swap file location
set undodir=~/tmp/vim-backup/undo//,.        " Undo file location

set backupskip=/tmp/*,/private/tmp/*,~/tmp/*,~/private/*    " Don't backup these
set writebackup     " Make a backup before overwriting a file







